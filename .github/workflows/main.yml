name: GitHub Actions
run-name: ${{ github.actor }} of 4 is doing Capstone Project CICD for serverless application

on:
  push:
    branches: [ main, "*" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14

      - name: Install Serverless Framework
        run: npm install -g serverless

      - name: Extract branch name
        id: branch_name
        run: echo "::set-output name=branch::$(echo $GITHUB_REF | sed 's/refs\/heads\///')"

      - name: Deploy Serverless Application
        env:
          SERVICE_NAME: ${{ steps.branch_name.outputs.branch }}
        run: |
          cd serverless-app-directory
          serverless deploy --stage $SERVICE_NAME

  deploy-dev:
    if: github.ref == 'refs/heads/dev'
    name: deploy to dev
    runs-on: ubuntu-latest
    #needs: [package-scan, unit-testing]
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - name: serverless deploy
        uses: serverless/github-action@v3.2
        with:
          args: deploy --stage dev
        env:
          DEPLOY_ENV: 'dev'
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  deploy-prod:
    if:  github.ref == 'refs/heads/prod'
    name: deploy to prod
    runs-on: ubuntu-latest
    #needs: [package-scan, unit-testing]
    strategy:
      matrix:
        node-version: [18.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: serverless deploy
      uses: serverless/github-action@v3.2
      with:
        args: deploy  --stage prod
      env:
        DEPLOY_ENV: 'prod'
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
